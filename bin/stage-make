#!/usr/bin/env bash
source "$(dirname "$0")/common/bootstrap.sh"
TARGET_NAME=$2;
TARGET_DIRECTORY="${STAGE_DIRECTORY}/$1/current"
LOGS_DIRECTORY="${STAGE_DIRECTORY}/$1/logs"
LOG_FILE=${LOGS_DIRECTORY}/${2}.log;

if [ ! -d ${TARGET_DIRECTORY} ]; then
    printf "\nERROR: DIRECTORY [${TARGET_DIRECTORY}] not found!\n";
    exit 1;
fi

if [ ! -d ${LOGS_DIRECTORY} ]; then
    printf "\nERROR: DIRECTORY [${LOGS_DIRECTORY}] not found!\n";
    exit 2;
fi

if [ ! -d ${HG_VAR_DIRECTORY} ]; then
   mkdir -p $HG_VAR_DIRECTORY;
fi

cd ${TARGET_DIRECTORY};

LOCKFILE="${HG_VAR_DIRECTORY}/locker${TARGET_DIRECTORY//\//-}-${TARGET_NAME/@/_}.lock";
LOCKFD=99

_lock()             { flock -$1 "$LOCKFD"; }
_no_more_locking()  { _lock u; _lock xn && rm -f $LOCKFILE; }
_prepare_locking()  { eval "exec $LOCKFD>\"$LOCKFILE\""; trap _no_more_locking EXIT; }
_throw_exit()       { printf "\n ERROR => Locker FOUND:\n$LOCKFILE\n[EXIT]\n"; exit 1; }
exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail

# ON START
_prepare_locking

# Simplest example is avoiding running multiple instances of script.
exlock_now || _throw_exit;

printf "\nStage $1 :: make $2\n";
printf "\n= = = = = = = = = = = = = = =\n$(date)\n" >> ${LOG_FILE};

/usr/local/bin/docker-compose exec -T php-fpm bash -c "make $TARGET_NAME" >> ${LOG_FILE} 2>&1;

printf "\n... done.\n";
